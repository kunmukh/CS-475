// File: boggle.cpp
// <The programs searches through a grid of letter, to find a
//  combinations of letter to form a word, that has been
//  read from an input file. if the word is found, the
//  programs prints out found, if not then printd  not-found.>
//
// ­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­
// Class: CS 215                     Instructor: Dr. Deborah Hwang
// Assignment: Programming Project 1 Date assigned: 1/27/2017
// Programmer: Kunal Mukherjee       Date completed:1/30/2017
//
//-------------------------------------------------------------------

#include <fstream>
#include <iostream>
#include <cstdlib>
#include <string>

 struct Tile {
     char letter;
     bool used;
   };

//limiting the size of the grid to 5
const int MAZE_SIZE = 5;

// Function to create a maze grid
void CreateMaze (std::ifstream& inFile,           // REC'D/P'BACK: input file
		 Tile maze[MAZE_SIZE][MAZE_SIZE], // P'BACK: filled maze grid
                 int &maxRows, int &maxCols);     // P'BACK: # rows/cols filled

// Function to print a maze grid
void PrintMaze(const Tile maze[MAZE_SIZE][MAZE_SIZE], // REC'D: grid to print
	       int maxRows, int maxCols);             // REC'D: # rows/cols

// Function to try to find path to exit staring at [row][col]
/*bool TryToEscape (Tile  maze[MAZE_SIZE][MAZE_SIZE], // REC'D/P'BACK: maze grid
		  int row, int col,                // REC'D: start location
		  char wordArray);                 // REC'D: the word to be found

// Recursive helper function that tries to find path in each direction

void Try(Tile maze[MAZE_SIZE][MAZE_SIZE],  // REC'D/P'BACK: maze grid
	 int row, int col,                 // REC'D: start location
	 bool& free,                       // P'BACK: result status
	 char wordArray);                  // REC'D/P'BACK: the word to be found
*/
int main(int argc, char *argv[])
{
   using namespace std;

   if (argc != 3)
   {
     cout << "Usage: " << argv[0] << " input pridfile"
	  << " output file " << endl;
      exit(1);
   }
   
   ifstream inFile (argv[1]);
   if (!inFile)
   {
      cout << "Error: unable to open input  mazefile" << endl;
      exit(1);
   }

   ofstream outfile (argv[2]);             
   if (!outfile)                 
    {
       cout << "Error opening output file: " << argv[2] << endl;
       exit(1);
    }  

   Tile maze[MAZE_SIZE][MAZE_SIZE];  // maze grid
   int maxRows;		             // number of rows filled
   int maxCols;		             // number of columns filled
   char wordFind;                   // the word needed to be found
   
   CreateMaze (inFile, maze, maxRows, maxCols);
   PrintMaze (maze, maxRows, maxCols);
   
   /*  while (inFile >> wordFind)
     {
             
       int row = 0;
       int col= 0;       // starting position indexes
       bool free = false;  // true if escaped the maze, false otherwise

       if (TryToEscape(maze, row, col, wordFind))
	 outfile << wordFind << " " << "found" << endl;
       else
	 outfile << wordFind  << " " << "not found" << endl;
	 }*/   
}

void CreateMaze (std::ifstream &inFile, Tile maze[MAZE_SIZE][MAZE_SIZE],
                 int &maxRows, int &maxCols)
{
   using namespace std;
   int rowIndex, colIndex;
   maxRows = MAZE_SIZE ;
   maxCols = MAZE_SIZE ; 

   string row;
   // Read each row from the file
   for (rowIndex = 1; rowIndex <= maxRows; rowIndex++)
   {
      inFile >> row;
      // Set left border character
      maze[rowIndex][0].letter = '+';
      // Copy row to maze grid
      for (colIndex = 1; colIndex <= maxCols; colIndex++)
	 maze[rowIndex][colIndex].letter = row[colIndex-1];
      // Set right border character
      maze[rowIndex][maxCols+1].letter = '+';
   }

   // Set top and bottom border characters
   for (colIndex = 0; colIndex <= maxCols+1; colIndex++)
   {
      maze[0][colIndex].letter = '+';
      maze[maxRows+1][colIndex].letter = '+';
   }
}

void PrintMaze(const  Tile maze[MAZE_SIZE][MAZE_SIZE], int maxRows, int maxCols)
{
   using namespace std;
   int rowIndex, colIndex;
  
   cout << "\nMaze" << endl;
   // For each row
   for (rowIndex = 0; rowIndex <= maxRows+1; rowIndex++)
   {
      // Print each character in a row
      for (colIndex = 0; colIndex <= maxCols+1; colIndex++)
	 cout << " " << maze[rowIndex][colIndex].letter;
      cout << endl;
   }
}

/*bool TryToEscape (Tile  maze[MAZE_SIZE][MAZE_SIZE], int row, int col,
		  char wordFind)
{
   bool free = false;  // initialize for first call
   // call recursive helper function
   if (wordFind[0] == maze [0][0]
     {
       Try (maze, row, col, free, wordArray);
     }
     
   return free;
}

void Try(Tile maze[MAZE_SIZE][MAZE_SIZE], int row, int col, bool& free,
	  char wordFind)   // Passed back : status of path,
                                                     // true if found exit
{
   // Base case:  path is blocked, just return
  if ( (maze[row][col] != '+'))
   {
      // Base case: found the exit, set free to true
      if (maze[row][col] == wordFind)
	 free = true;
      else
      {
	 // General case: mark this pace and possibiy try each direction
	 // Mark this place
	 maze[row][col] = '*';

	 // Smaller caller: change row/col index by one
	 // Try down
	 Try (maze, row+1, col, free,wordFind);
	 if (!free)  // still looking
	    // Try up
	    Try (maze, row-1, col, free,wordFind);
	 if (!free)  // still looking
	    // Try right
	    Try (maze, row, col+1, free,wordFind);
	 if (!free) // still looking
	    // Try left
	    Try (maze, row,col-1, free, wordFind);
	 //Try left diagonal
	 if (!free)  // still looking
	   Try(maze, row-1, col-1, free, wordFind);
	 if (!free)  // still looking
	   Try(maze, row+1, col-1, free, wordFind);
	  if (!free)  // still looking
	   Try(maze, row-1, col+1, free, wordFind);
	  if (!free)  // still looking
	   Try(maze, row+1, col+1, free, wordFind);
	 // Tried all directions, but not part of path to exit, so unmark
	 if (!free) 
	    maze[row][col] = 'O';
      }
   }
   }*/