// File: binary-search.cpp
// Inclass exercise for 1/22/2017

#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdlib> // exit()

// Function prototypes go here
void read_datafile (std::ifstream &infile, // REC'D/P'BACK: input filestream
		    int array[],           // P'BACK: array to be filled
		    int &num_elements);    // P'BACK: # elements filled
void print_array (const int array[],       // REC'D: array to print
		  int num_elements);       // REC'D: # elements filled

const int ARRAY_SIZE = 100;  // C++ constant; don't use #define

int main(int argc, char *argv[])
{
   using namespace std;

   if (argc != 2)
   {
      cerr << "Usage: " << argv[0] << " datafile" << endl;
      exit(1);
   }

   ifstream infile (argv[1]);
   if (!infile)
   {
      cerr << "Unable to open file: " << argv[1] << endl;
      exit(1);
   }

   int n, target, position;
   int an_array[ARRAY_SIZE];

   read_datafile(infile, an_array, n);
   print_array(an_array, n);

   cout << "\nEnter an integer to search for: ";
   cin >> target;

   // Function call goes here

   if (position != 0)
      cout << "The target is at index: " << position << endl;
   else
      cout << "The target is not in the file" << endl;

   return 0;
}

// Function definitions goes here
void read_datafile (std::ifstream &infile, int array[], int &num_elements)
{
   int value;
   num_elements = 0;
   while (infile >> value)  // read until end of file
   {
      array[num_elements] = value;
      num_elements++;
   }
} // end read_datafile

void print_array (const int array[], int num_elements)
{
   using namespace std;

   for (int i = 0; i < num_elements; i++)
   {
      if (i % 10 == 0)
	 cout << endl;
      cout << setw(4) << array[i];
   }
   cout << endl;
} // end print_array
