//File: setcard.cpp
// Declare a class to represent set Card Date and its required
//functions
//-----------------------------------------------------------------
// Class: CS 215                     Instructor: Dr. Deborah Hwang
// Assignment:    setcard.h          Date assigned:  2/2/2017
// Programmer:    Kunal Mukherjee    Date completed: 9/2/2017

#include "setcard.h"

static std::string NumberConversion[] = {"ERROR","ONE", "TWO", "THREE"};
static std::string ColorConversion[] = {"ERROR","RED","GREEN","PURPLE"};
static std::string ShadeConversion[] = {"ERROR", "SOLID", "STRIPED", "OPEN"};
static std::string ShapeConversion[] = {"ERROR", "DIAMOND", "SQUIGGLE", "OVAL"};

SetCard::SetCard()
{
  number = 1;
  color = RED;
  shade = SOLID;
  shape = DIAMOND;
}

void SetCard::Initialize(int newNumber, ColorType newColor, ShadeType newShade, ShapeType newShape)
{
  number = newNumber;

  color = newColor;

  shade = newShade;

  shape = newShape;
}

int SetCard::GetNumber() const
 {
   return number;
 }

ColorType SetCard::GetColor() const
{
  return color;
}

ShadeType SetCard::GetShade() const
{
  return shade;
}

ShapeType SetCard::GetShape() const
{
  return shape;
}

bool SetCard:: IsSet(SetCard card2, SetCard card3) const
{
  if(((number == card2.number) && (number == card3.number)) &&
     ((color == card2.color) && (color == card3.color)) &&
     ((shade == card2.shade) && (shade == card3.shade)) &&
     ((shape == card2.shape) && (shape == card3.shape)))
    {
      return true;
    }

  if(((number != card2.number) && (number != card3.number)) &&
     ((color == card2.color) && (color == card3.color)) &&
     ((shade == card2.shade) && (shade == card3.shade)) &&
     ((shape == card2.shape) && (shape == card3.shape)))
    {
      return true;
    }

  if(((number == card2.number) && (number == card3.number)) &&
     ((color != card2.color) && (color != card3.color)) &&
     ((shade == card2.shade) && (shade == card3.shade)) &&
     ((shape == card2.shape) && (shape == card3.shape)))
    {
      return true;
    }

  if(((number == card2.number) && (number == card3.number)) &&
     ((color == card2.color) && (color == card3.color)) &&
     ((shade != card2.shade) && (shade != card3.shade)) &&
     ((shape == card2.shape) && (shape == card3.shape)))
    {
      return true;
    }

  if(((number == card2.number) && (number == card3.number)) &&
     ((color == card2.color) && (color == card3.color)) &&
     ((shade == card2.shade) && (shade == card3.shade)) &&
     ((shape != card2.shape) && (shape != card3.shape)))
    {
      return true;
    }

  if(((number != card2.number) && (number != card3.number)) &&
     ((color != card2.color) && (color != card3.color)) &&
     ((shade != card2.shade) && (shade != card3.shade)) &&
     ((shape != card2.shape) && (shape != card3.shape)))
    {
      return true;
    }
  
if(((number != card2.number) && (number != card3.number)) &&
     ((color != card2.color) && (color != card3.color)) &&
     ((shade == card2.shade) && (shade == card3.shade)) &&
     ((shape == card2.shape) && (shape == card3.shape)))
    {
      return true;
    }

 if(((number != card2.number) && (number != card3.number)) &&
     ((color == card2.color) && (color == card3.color)) &&
     ((shade != card2.shade) && (shade != card3.shade)) &&
     ((shape == card2.shape) && (shape == card3.shape)))
    {
      return true;
    }

 if(((number != card2.number) && (number != card3.number)) &&
     ((color == card2.color) && (color == card3.color)) &&
     ((shade == card2.shade) && (shade == card3.shade)) &&
     ((shape != card2.shape) && (shape != card3.shape)))
    {
      return true;
    }

 if(((number != card2.number) && (number != card3.number)) &&
     ((color != card2.color) && (color != card3.color)) &&
     ((shade != card2.shade) && (shade != card3.shade)) &&
     ((shape == card2.shape) && (shape == card3.shape)))
    {
      return true;
    }

 if(((number != card2.number) && (number != card3.number)) &&
     ((color != card2.color) && (color != card3.color)) &&
     ((shade == card2.shade) && (shade == card3.shade)) &&
     ((shape != card2.shape) && (shape != card3.shape)))
    {
      return true;
    }
 

   if(((number == card2.number) && (number == card3.number)) &&
     ((color != card2.color) && (color != card3.color)) &&
     ((shade == card2.shade) && (shade == card3.shade)) &&
     ((shape != card2.shape) && (shape != card3.shape)))
    {
      return true;
    }

    if(((number == card2.number) && (number == card3.number)) &&
     ((color == card2.color) && (color == card3.color)) &&
     ((shade != card2.shade) && (shade != card3.shade)) &&
       ((shape != card2.shape) && (shape != card3.shape)))
    {
      return true;
    }

    else
      return false;
}

std::string SetCard::ToString() const
{
  return NumberConversion[number] ColorConversion[color]
    ShadeConversion[shade] ShapeConversion[shape] ;
}

std::istream &operator >> (std::istream &in, SetCard &aCard)
{
  int intNum;
  char intColor;
  char intShape;
  char intShade;
  
  in >> intNum;  
  in >> intColor;
  in >> intShade;
  in >> intShape;

  if (intNum == 1)
    aCard.number = 1;
  if (intNum == 2)
    aCard.number = 2;
  if (intNum == 3)
    aCard.number = 3;

  if (intColor == 'G')
    aCard.color = GREEN;
  if (intColor == 'R')
    aCard.color = RED;
  if (intColor == 'P')
    aCard.color = PURPLE;

  if (intShade == 'L')
    aCard.shade = SOLID;
  if (intShade == 'S')
    aCard.shade = STRIPED;
  if (intShade == 'O')
    aCard.shade = OPEN;

  if (intShape == 'D')
    aCard.shape = DIAMOND;
  if (intShape == 'S')
    aCard.shape = SQUIGGLE;
  if (intShape == 'O')
    aCard.shape = OVAL;  
  
  
  return in;
}

std::ostream &operator << (std::ostream &out, SetCard &aCard)
{
  out << aCard.number << " " << aCard.color <<
    " " << aCard.shade << " " << aCard.shape << std::endl;
}
