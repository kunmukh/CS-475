// File: sorted.h
// Defines SortedType<T>, a template for a sorted list of items
// COMPLETE Circular, Doubly-Linked list implementation
//    Add C++ iterators for range-based iteration
// Based on Dale, et al., C++ Plus Data Structures 6/e, Chapter 6

//  An T must define the following:
//  RelationType:  {LESS, GREATER, EQUAL}
//  Member function ComparedTo(T item) which returns 
//       LESS, if self "comes before" item 
//       GREATER, if self "comes after" item 
//       EQUAL, if self and item are the same 
//
// Its header file must be included _before_ this header file

#ifndef SORTED_H_
#define SORTED_H_

#include <algorithm>  // STL swap routine
#include "nodetype.h"
#include "sortediter.h"

template<class T>
class SortedType
{
  public:
   // Constructor - creates an empty list
   SortedType();

   // Copy constructor
   SortedType (const SortedType<T> & original);

   // Assignment operator
   SortedType<T>& operator= (const SortedType<T> & original);

   // Destructor - deletes nodes when object is destroyed
   ~SortedType();

   // Function: Returns the list to the empty state.
   // Post:  List is empty.
   void MakeEmpty();

   // Function:  Determines whether list is full.
   // Returns: true if list is full; false otherwise
   bool IsFull() const;

   // Function: Determines the number of elements in list.
   // Returns: number of elements in list
   int GetLength() const;

   // Function: Retrieves list element whose key matches item's key (if
   //           present).
   // Returns: an element someItem whose key matches item's key, and
   //       passes back found = true
   //    otherwise returns item and passes back found = false
   T GetItem(T item,       // REC'D: item to find
	     bool& found) const;  // P'BACK: true if item found
   //         false otherwise

   // Function: Adds item to list.
   // Assumes: List is not full, item is not in list.
   void PutItem(T item);  // REC'D: item to insert

   // Function: Deletes the element whose key matches item's key.
   // Assumes: Exactly one element in list has a key matching item's key.
   void DeleteItem(T item);  // REC'D: item with key to match

   // Function: Returns an associated ADT Iterator to the first element
   SortedTypeIterator<T> begin();
   // Function: Returns an associated ADT Iterator to one past the last element
   SortedTypeIterator<T> end();
   
  private:
   int length;
   NodeType<T>* listData;
   NodeType<T>* currentPos;
};

template<class T>
SortedType<T>::SortedType()  // Class constructor
{
   length = 0;
   // Create the header node
   listData = new NodeType<T>;
   listData->next = listData;
   listData->back = listData;
}

template<class T>
SortedType<T>::SortedType (const SortedType<T> & original)
{
   // Create the header node
   listData = new NodeType<T>;
   listData->next = listData;
   listData->back = listData;

   // Copy length
   length = original.length;

   // Copy data nodes
   // Start at first data node of original
   NodeType<T> *scanPtr = original.listData->next;  
   while (scanPtr != original.listData)  // stop at original's header node
   {
      // Create copy node
      NodeType<T> *newNode = new NodeType<T>;
      newNode->info = scanPtr->info;
      // Insert between the last node and the header node
      newNode->back = listData->back;  // back points to last node
      newNode->next = listData;        // next point to header node
      listData->back->next = newNode;  // predecessor next points to new node
      listData->back = newNode;        // successor back points to new node
      // Increment scanPtr
      scanPtr = scanPtr->next;
   }
}

template<class T>
SortedType<T> & SortedType<T>::operator=
   (const SortedType<T> & original)
{
   // Make a copy of the original
   SortedType<T> theCopy(original);
   // Swap contents of this object with the copy
   // Using std::swap from the STL <algorithm> library
   std::swap(theCopy.listData, listData);
   std::swap(theCopy.length, length);
   // Return this object -- upon return, theCopy containing the
   //                       original data will be destroyed
   return *this;  // 'this' is a pointer, so need to dereference.
}


  template<class T>
  SortedType<T>::~SortedType()
  {
    NodeType<T>* tempPtr;
    NodeType<T>* header = listData;  // header node
    listData = listData -> next;            // start with first data node
   
    // Delete the data nodes
    while (listData != header)  // stop when get to header
      {
	tempPtr = listData;
	listData = listData->next;
	delete tempPtr;
      }
    delete header;
  }

template<class T>
void SortedType<T>::MakeEmpty()
{
   NodeType<T>* tempPtr;
   NodeType<T>* header = listData;  // header node
   listData = listData -> next;            // start with first data node
   
   // Delete the data nodes
   while (listData != header)  // stop when get to header
   {
      tempPtr = listData;
      listData = listData->next;
      delete tempPtr;
   }
   // Reset header node links for empty list
   listData->next = listData;
   listData->back = listData;
   length = 0;
}

// Helper function that finds item in the list
template<class T>
void FindItem(NodeType<T>* listData, T item, 
              NodeType<T>*& location, bool& found)
// Pre:  List is not empty.
// Post: If there is an element someItem whose key matches item's 
//              key, then found = true; otherwise, found = false. 
//       If found, location contains the address of someItem; 
//       otherwise, location contains the address of the logical 
//              successor of item.
{
   bool moreToSearch = true;

   location = listData->next;  // start with first data node
   found = false;
   while (moreToSearch && !found)
   {
      if (item.ComparedTo(location->info) == LESS)
	 moreToSearch = false;
      else if (item.ComparedTo(location->info) == EQUAL)
	 found = true;
      else
      {
	 location = location->next;
	 moreToSearch = (location != listData);  // stop at the header node
      }
   }
}

template<class T>
T SortedType<T>::GetItem (T item, bool& found) const
{
   NodeType<T> *location;

   FindItem(listData, item, location, found);
   if (found)  // return Info(location)
      item = location->info;

   return item;
}

template<class T>
void SortedType<T>::PutItem(T item)
{
   NodeType<T>* newNode;
   NodeType<T>* location;
   bool found;
  
   newNode = new NodeType<T>;
   newNode->info = item;
   FindItem(listData, item, location, found);

   // Set new node links
   newNode->next = location;
   newNode->back = location->back;
   // Set predecessor next link
   location->back->next = newNode;
   // Set successor back link
   location->back = newNode;

   length++;
}

template<class T>
void SortedType<T>::DeleteItem(T item)
{
   NodeType<T>* location;
   bool found;
   
   FindItem(listData, item, location, found);
   
   // Set predecessor next link
   location->back->next = location->next;
   // Set successor back link
   location->next->back = location->back;
   
   delete location;
   length--;
}

template<class T>
bool SortedType<T>::IsFull() const
{
   NodeType<T>* location;
   try
   {
      location = new NodeType<T>;
      delete location;
      return false;
   }
   catch(std::bad_alloc exception)
   {
      return true;
   }
}

template<class T>
int SortedType<T>::GetLength() const
{
   return length;
}

template<class T>
SortedTypeIterator<T> SortedType<T>::begin()
{
   SortedTypeIterator<T> it(listData->next);  // pointer to first item
   return it;
}

template<class T>
SortedTypeIterator<T> SortedType<T>::end()
{
   SortedTypeIterator<T> it(listData);  // pointer to header node
   return it;
}


#endif // SORTED_H_
