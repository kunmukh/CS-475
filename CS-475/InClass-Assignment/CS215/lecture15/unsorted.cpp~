// File: unsorted.cpp
// Implementation file for UnsortedType class
// Based on Dale, et al., C++ Plus Data Structures 6/e, Chapter 3

#include "unsorted.h"

UnsortedType::UnsortedType()
{
   length = 0;  // empty list has no items
}

bool UnsortedType::IsFull() const
{
   return (length == MAX_ITEMS);
}

int UnsortedType::GetLength() const
{
   return length;
}

void UnsortedType::MakeEmpty()
{
   length = 0;  // empty list has no items
}

void UnsortedType::PutItem (ItemType item)
 {
   into[length] = item; // put item into info
   length++;            // add it
 }

void UnsortedType::DeleteItem(ItemType item)
{
  // Find the location of the item
  int location = 0; // start searching at the first element
  // loop until we find the item that matches
  while(info[location].ComparedTo(item) != EQUAL)
    location++;
  info[location] = info[length - 1]; // move the last item
                                     // to this location
  length--; //get rid of the last item;
}
  
void UnsortedType::GetItem(ItemType item, bool& found)const
{
