// File: sorted.cpp
// Defines SortedType, a sorted list of items
// Array implementation
// Based on Dale, et al., C++ Plus Data Structures 6/e, Chapter 4

#include "sorted.h"

SortedType::SortedType()
{
  info = new ItemType[100]; //default list can hold 100 items
  maxItems = 100;
  length = 0;
}

SortedType::SortedType(int size)
{
  info = new ItemType[size]; //default list can
                             //hold size number of items  
  maxItems = size;
  length = 0;
}

SortedType::~SortedType()
{
  delete [] info; // deallocate the array
}

void SortedType::PutItem(ItemType item) 
{
   bool moreToSearch;
   int location = 0;

   // find the location where the item goes
   moreToSearch = (location < length);
   while (moreToSearch) 
   {
      // if the item is less than Info(location), have found location for item
     if (item.ComparedTo(info[location]) == LESS)
       moreToSearch = false;
     
      // if the item is greater than Info(location), keep looking
     else if (item.ComparedTo(info[location])== GREATER)
       {
	 location++;
	 moreToSearch = (location < length);
       }
     
     else //EQUAL ITEMS
       {
	 std::cout << "Item is equal; should not happen" << std::endl;
	 return;
       }
   } 

   // copy all elements after item's location forward one location
   for (int i = length-1; i >= location; i--)
     info[i+1] = info[i];

   // put item into list at location
   info[location] = item;
   // increment length
   length++;
}

void SortedType::DeleteItem(ItemType item) 
{
   int location = 0;  // start searching at beginning of list

   // look for the item's location
   // find the location where the item goes
   bool moreToSearch = (location < length);
   while (moreToSearch) 
   {
      // if the item is equal Info(location), have found location for item
     if (item.ComparedTo(info[location]) == EQUAL)
       moreToSearch = false;
     
      // if the item is greater than Info(location), keep looking
     else if (item.ComparedTo(info[location])== GREATER)
       {
	 location++;
	 moreToSearch = (location < length);
       }
          else //LESS THAN ITEMS
       {
	 std::cout << "Item is less than; should not happen" << std::endl;
	 return;
       }
   }

   // copy all elements after the item back one location
      for (int i = location + 1; i < length; i++)
	info[i-1] = info[i];

   // decrement length
   length--;
}

ItemType SortedType::GetItem(ItemType item, bool& found) 
{
   // bool moreToSearch;
   // int location = 0;
   // found = false;

   // moreToSearch = (location < length);

   // while (moreToSearch && !found) 
   // {
   //    switch (item.ComparedTo(info[location]))
   //    {
   // 	 case LESS    : 
   // 	 case GREATER : location++;
   // 	    moreToSearch = (location < length);
   // 	    break;
   // 	 case EQUAL   : found = true;
   // 	    item = info[location];
   // 	    break;
   //    }
   // }
   // return item;

  // Binary Search version
  int first, last, midpoint;
  found = false;

  first = 0; //index of the lower bound of search range;
  last = length-1; //index of the upper bound of the search range;
  bool moreToSearch = (first <= last); //false when first and last have crossed
  while (moreToSearch)
    {
      midpoint = (first+last)/2;
      switch (item.ComparedTo(info[midpoint]))
	{
	case EQUAL:
	  found= true;
	  moreToSearch = false;
	  item = info[midpoint];
	  break;
	case LESS: //adjust the upper bound
	  last = midpoint -1;
	  moreToSearch = (first <= last);
	  break;
	case GREATER: //adjust the lower bound
	  first = midpoint +1;
	  moreToSearch = (first <= last);
	  break;
	}
    }
      return item;
    
}

void SortedType::MakeEmpty() 
{
   length = 0;
} 


bool SortedType::IsFull() const
{
   return (length == maxItems);
}

int SortedType::GetLength() const
{
   return length;
}

void SortedType::ResetList()
// Post: currentPos has been initialized.
{
   currentPos = -1;
}

ItemType SortedType::GetNextItem()
// Post: item is current item.
//       Current position has been updated.
{
   currentPos++;
   return info[currentPos];
}
