// File: boggle.cpp
// <The programs searches through a grid of letter, to find a
//  combinations of letter to form a word, that has been
//  read from an input file. if the word is found, the
//  programs prints out found, if not then printd  not-found.>
//
// ­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­
// Class: CS 215                     Instructor: Dr. Deborah Hwang
// Assignment: Programming Project 1 Date assigned: 1/27/2017
// Programmer: Kunal Mukherjee       Date completed:1/30/2017
//
//-------------------------------------------------------------------

#include <fstream>
#include <iostream>
#include <cstdlib>
#include <string>

struct Tile {                     //Construction of a struct which
     char letter;                //has a character component as well as
     bool used;                   // bool, so that marking a cell as visited
   };                             // is easily implemented.
                                
                                  
    
  

const int GRID_SIZE = 7;          //The maximum size of the grid +2,
                                   //to account for the extra rows and col  used

//The function MakeGrid, reads the 5 x 5 word letter and fills them up in a 2D grid and
//make a border of '*' around the grid
void MakeGrid (Tile Grid[GRID_SIZE][GRID_SIZE],// REC'D&PASS'D - The grid
	       std::ifstream& inFile); //REC'D/P'BACK: input file

//This functions prints the grid onto the terminal
void PrintGrid (const Tile Grid[GRID_SIZE][GRID_SIZE]); //REC'D - The grid

//This functions checks to see if the first letter of the word matches
//with any letter from the grid and if it does, it triggers a different
//function, which takes the first letter and tries to find the rest of
//the letter. This functcions makes sure, if the search for rest of the
//letters fails, it still goes through the loop and look at every letter
//in the grid that matches the first letter of the word. 
bool SearchFirstLetter (Tile Grid[GRID_SIZE][GRID_SIZE], // REC' grid
			std::string word, // REC'D - The word
			int rowIndex,  //REC'D&PASS'D -The row index
			int colIndex, //REC'D&PASS'D - The col index
			int wordIndex, //REC'D&PASS'D - The word index
			int maxRow,   //REC'D&PASS'D- Max Rows
			int maxCol);   //REC'D&PASS'D- Max Cols

//This function is triggered if the first letter of the word matches
//any letter in the grid. This functions job is to see if it able
//to find rest of the letters recursively. 
void SearchRestLetter (Tile Grid[GRID_SIZE][GRID_SIZE],  // REC'D - The grid
		       std::string word,  // REC'D - The word
		       int rowIndex,      //REC'D&PASS'D -The row index
		       int colIndex,     // REC'D&PASS'D -The col  index
		       int wordIndex,    //REC'D&PASS'D - The word index
		       bool &found);     //REC'D&PASS'D - The search status    
  

int main(int argc, char *argv[])
{
   using namespace std;

   if (argc != 3)   // Check to see if all commandline
                    //argumenst have been correctly entered
   {
     cout << "Usage: " << argv[0] << " input pridfile"
	  << " output file " << endl;
      exit(1);
   }
   
   ifstream inFile (argv[1]);   //Check to see if the input file opens correctly
   if (!inFile)
   {
      cout << "Error: unable to open input Grid File" << endl;
      exit(1);
   }

   ofstream outfile (argv[2]); //Check to see of the output file opens correctly            
   if (!outfile)                 
    {
       cout << "Error opening output file: " << argv[2] << endl;
       exit(1);
    }

   Tile Grid[GRID_SIZE][GRID_SIZE];         //Creation of a 2D Tile, which will
                                             //used to be fill up with
                                             //the letter of the maze

   MakeGrid(Grid, inFile);              // Make the Grid
   PrintGrid(Grid);                       //Print the grid

   string  word;                        //create a variable to store the words
                                        //read from the input file

   for (int i = 1; i < GRID_SIZE; i++)      //initialize all the Grid cells boolean
     for (int j = 1; j < GRID_SIZE; j++)  //value to fasle.
       Grid[i][j].used = false;                                
     
   
   while (inFile >> word)        //run this loop till there is word in the input file
     {
       int rowIndex = 1, colIndex = 1, wordIndex = 0;  //the initialization of the
                                                       // row, column and word indexes
             
       if (SearchFirstLetter(Grid, word, rowIndex, colIndex, wordIndex,
			     GRID_SIZE - 2, GRID_SIZE - 2))  //To check if the word is found
	 {
	   outfile << word << " " << "found" << endl;
	 }
       else   // if not then "not found" 
	 {
	   outfile << word << " " << "not found" << endl;
	 }
       
     }
   
   inFile.close();        // close the inFile object
   outfile.close();       // close the outfile object as well
}

void MakeGrid (Tile Grid[GRID_SIZE][GRID_SIZE],std::ifstream &inFile)
{
  using namespace std;
  
  string word;
  int counter;
 
  //Start the loop at r= 1. because the outer boundary of the loop will be
  //filled with '*'
  for ( int r = 1; r < GRID_SIZE - 1; r++)
    {
      inFile >> word ;           // Get the letter to put it in the grid
      for ( int c = 1; c < GRID_SIZE; c++)
	{
	  Grid[r][c].letter = word[c-1]; 
	}
    }

  for (int r = 0; r < GRID_SIZE ; r++) // setting up the right and left border
    {
      
      Grid[r][0].letter = '*' ; //works
      Grid[r][GRID_SIZE - 1].letter = '*';
      
    }

  for ( int c = 0; c < GRID_SIZE ; c++) // setting up the top and bottom border
    {
      Grid[0][c].letter = '*';
      Grid[GRID_SIZE - 1][c].letter = '*';
    }
 
 
}

void PrintGrid (const Tile Grid[GRID_SIZE][GRID_SIZE])
{
  using namespace std;
  
  cout << "\nGRID\n" << endl;
  for ( int r = 1; r <= GRID_SIZE - 2; r++)  // Print the grid without the stars, thats why the
    {                                       // top and bottom rows , left and right cols are omitted 
       for ( int c = 1; c <= GRID_SIZE - 2; c++)
	 {
	   cout << " " << Grid[r][c].letter ;	   
	 }
       cout << endl;
     }
}
	  
bool SearchFirstLetter (Tile Grid[GRID_SIZE][GRID_SIZE],std:: string word,
			int rowIndex, int colIndex, int wordIndex,
			int maxRow, int maxCol)
{
  bool found = false;                                           // initializing the boolean value found
                                                                // so by default SearchFirstLetter is false
  
  if (word[wordIndex] == Grid[rowIndex][colIndex].letter)   //Base case: The word letter match the grid letter
	{      
	  SearchRestLetter (Grid, word, rowIndex, colIndex,  // So, all function to check is rest of the letters 
			    wordIndex, found);                  // are there
	}
      
  if (colIndex <= maxCol && !found)             // Base Case: The word letter does not matches the grid letter
	{
	  return SearchFirstLetter(Grid, word, rowIndex, colIndex + 1, // IN this case, the next column of the same row
				   wordIndex, maxRow, maxCol); // to be checked to see if that letter matched the word letter
	}
  
  else if (rowIndex <= maxRow && !found)  //Sub-case: If the search has reached the last column of the smae row then
    {                                 //then it should move up a row and start from col 1 to check if that row
                                      //hold the first leller of the word
      return SearchFirstLetter(Grid, word, rowIndex + 1, 1 , 
				   wordIndex, maxRow, maxCol);	  
	}
  return found;         //If the word is found then, the SearchFirstLetter is marked as true and "found" is printed
  
}

void SearchRestLetter (Tile Grid[GRID_SIZE][GRID_SIZE],std:: string word,int rowIndex,
		        int colIndex, int wordIndex, bool &found)
{
  //Base Case: If the letter in the grid matches the word letter, and the word
  //index length is same as the word length and the specific
  //grid has not been used then we have found our word. So, to turn the found = true. 
  if (Grid[rowIndex][colIndex].letter == word[wordIndex] && wordIndex == word.length()-1
      && Grid[rowIndex][colIndex].used == false )    
	 found = true;
  //SUb-Case: If the letter in the gird matches the word letter
  //but the word index is not of the word legth, the function needs find the next letter
  // and check to see if its the end of the word length.
  else if(Grid[rowIndex][colIndex].letter == word[wordIndex]) 
	{
	  if (Grid[rowIndex][colIndex].used == false) //Check only if the Grid word is not used
	    {
     
	      Grid[rowIndex][colIndex].used = true; //Mark the Grid

	      if (!found) //Look right and to find the next letter in the word
	      SearchRestLetter (Grid, word , rowIndex+1, colIndex, wordIndex+1, found);
	    
	    if (!found)    //Look left and to find the next letter in the word
	      SearchRestLetter (Grid, word , rowIndex-1, colIndex, wordIndex+1, found);
	 
	    if (!found)   //Look up and to find the next letter in the word  
	      SearchRestLetter (Grid, word,  rowIndex, colIndex-1, wordIndex+1, found);
	 
	    if (!found)   //Look down and to find the next letter in the word 
	      SearchRestLetter (Grid, word , rowIndex, colIndex+1, wordIndex+1, found);

	    if (!found)  //Look up-right corner and to find the next letter in the word 
	      SearchRestLetter (Grid, word , rowIndex-1, colIndex-1, wordIndex+1, found);
	  
	    if (!found)  //Look down-right corner and to find the next letter in the word
	      SearchRestLetter (Grid, word , rowIndex-1, colIndex+1, wordIndex+1, found);
	   
	    if (!found)  //Look up-left corner and to find the next letter in the word
	      SearchRestLetter (Grid, word , rowIndex+1 , colIndex-1, wordIndex+1, found);
	   
	    if (!found)  //Look down-right corner and to find the next letter in the word
	      SearchRestLetter (Grid, word , rowIndex+1 , colIndex+1, wordIndex+1, found);
	    
	         
	    Grid[rowIndex][colIndex].used = false;	// if not found turn unmark the grid
	   
	  }
	  
   }
   
   
}
      
      
	  
